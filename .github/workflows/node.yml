name: Node.js Workflow

on:
    workflow_run:
      workflows: ["Terraform Infrastructure"]
      types:
        - completed
permissions:
  pull-requests: read

jobs:
  setup:
    uses: YasminVargass/Reusable-Workflow-Template/.github/workflows/node-setup.yml@main
    with:
      node-version: '18'

  build:
    needs: setup
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Install dependencies
      run: npm install
      working-directory: node

    - name: Run ESLint
      run: npx eslint . --format json --output-file eslint-report-artifact.json
      working-directory: node
    
    - name: Upload ESLint report Artifact
      uses: actions/upload-artifact@v2
      with:
        name: eslint-report-artifact
        path: eslint-report-artifact.json
       
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2.2.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
            -Dsonar.organization=yasminvargass
            -Dsonar.projectKey=YasminVargass_NodeApp-CI
            -X
            -Dsonar.sources=.

    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/node-app-welcome:latest .
    
    - name: Save Docker image as tar
      run: docker save ${{ secrets.ACR_LOGIN_SERVER }}/node-app-welcome:latest -o node-app-welcome.tar
    
    - name: Upload Docker image tar Artifact
      uses: actions/upload-artifact@v2
      with:
        name: node-app-welcome-image
        path: node-app-welcome.tar

    - name: Push Docker image
      run: docker push ${{ secrets.ACR_LOGIN_SERVER }}/node-app-welcome:latest
     
  deploy:
        needs: build
        runs-on: ubuntu-latest
    
        steps:
        - name: Checkout repository
          uses: actions/checkout@v2
    
        - name: Azure Login
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
    
        - name: Set up Kubernetes CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'latest'
    
        - name: Get AKS credentials
          run: az aks get-credentials --resource-group challenge_rg --name challenge_cluster
    
        - name: Create namespace
          run: kubectl create namespace dev || true
    
        - name: Create ACR secret
          run: |
            kubectl create secret docker-registry acr-secret \
              --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
              --docker-username=${{ secrets.ACR_USERNAME }} \
              --docker-password=${{ secrets.ACR_PASSWORD }} \
              --docker-email=${{ secrets.ACR_EMAIL }} \
              --namespace=dev
    
        - name: Deploy to AKS
          run: |
            kubectl apply -f manifests/deployment.yml --namespace dev
            kubectl apply -f manifests/service.yml --namespace dev
            
